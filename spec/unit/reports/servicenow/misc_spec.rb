# rubocop:disable Metrics/LineLength

require 'support/unit/reports/servicenow_spec_helpers'

describe 'ServiceNow report processor: miscellaneous tests' do
  let(:processor) { new_processor }
  let(:settings_hash) { default_settings_hash }
  let(:expected_credentials) { default_credentials }
  let(:facts) { default_facts }

  before(:each) do
    mock_settings_file(settings_hash)
    allow(processor).to receive(:facts).and_return(facts)
  end

  context 'loading ServiceNow config' do
    shared_context 'setup hiera-eyaml' do
      before(:each) do
        # Choose an arbitrary incident-creation status
        allow(processor).to receive(:status).and_return 'failed'

        hiera_eyaml_config = {
          pkcs7_private_key: File.absolute_path('./spec/support/common/hiera-eyaml/private_key.pkcs7.pem'),
          pkcs7_public_key: File.absolute_path('./spec/support/common/hiera-eyaml/public_key.pkcs7.pem'),
        }
        # These are what hiera-eyaml's load_config_file method delegates to so we mock them to also
        # test that we're calling the right "load hiera-eyaml config" method
        allow(File).to receive(:file?).and_call_original
        allow(File).to receive(:file?).with('/etc/eyaml/config.yaml').and_return(true)
        allow(YAML).to receive(:load_file).with('/etc/eyaml/config.yaml').and_return(hiera_eyaml_config)
      end
    end

    context 'with hiera-eyaml encrypted password' do
      let(:encrypted_password) do
        # This will be set by the tests
        nil
      end
      let(:config) do
        default_config = super()
        # NOTE: This password is the encrypted form of 'test_password'. It was generated by the command
        # 'eyaml encrypt -s 'test_password' --pkcs7-private-key=./spec/support/common/hiera-eyaml/private_key.pkcs7.pem --pkcs7-public-key=./spec/support/common/hiera-eyaml/public_key.pkcs7.pem'
        default_config['password'] = encrypted_password
        default_config
      end

      include_context 'setup hiera-eyaml'

      context 'that contains whitespace characters' do
        let(:encrypted_password) do
          <<-PASSWORD
          ENC[PKCS7,MIIBeQYJKoZIhvcNAQcDoIIBajCCAWYCAQAxggEhMIIBHQIBADAFMAACAQEw
          DQYJKoZIhvcNAQEBBQAEggEATRNhowHPKMCD2VrAgKz35BZLTG3Iuf34XfG2
          OUdwNw9IIEqHQiNXKbuqJa6T/6okGGtEVoSYMNk/jgTZS5IFMSZCIELNBcSo
          qS6ALwgPfyvmsVAzUpdfKIzuyszA4YczMGxUN3Plo5/1EHdzDZjtrEQ9QUHj
          jBlfOW95i5wKKwCzbAh5KshPyxwZ8cro9zHAzH7W4THDzWNwtn6523ZLrXll
          bxYYXfwGp3TBJJOvG+LsrdQUvbQOF+efgsgXRi/0e50kSByvUSBtEBkhm7vt
          DYvlL+0lfHjGk0+Trx9+VxMVb+kEW1P3R5ZC1K50fIflJxlueFsPazzLYcpS
          WjQB2zA8BgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBBpjFMFKz7Y/7BtRzv5
          /TLngBBQBvBP5DV57A1iY/y2extG]
          PASSWORD
        end
        let(:settings_hash) do
          super().merge('incident_creation_conditions' => ['failures'])
        end

        it 'decrypts the password' do
          expected_incident = {
            short_description: short_description_regex('failed'),
            description: %r{#{settings_hash['pe_console_url']}},
          }
          expect_created_incident(expected_incident, expected_credentials)
          processor.process
        end
      end

      context 'that does not contain whitespace characters' do
        let(:encrypted_password) do
          'ENC[PKCS7,MIIBeQYJKoZIhvcNAQcDoIIBajCCAWYCAQAxggEhMIIBHQIBADAFMAACAQEwDQYJKoZIhvcNAQEBBQAEggEATRNhowHPKMCD2VrAgKz35BZLTG3Iuf34XfG2OUdwNw9IIEqHQiNXKbuqJa6T/6okGGtEVoSYMNk/jgTZS5IFMSZCIELNBcSoqS6ALwgPfyvmsVAzUpdfKIzuyszA4YczMGxUN3Plo5/1EHdzDZjtrEQ9QUHjjBlfOW95i5wKKwCzbAh5KshPyxwZ8cro9zHAzH7W4THDzWNwtn6523ZLrXllbxYYXfwGp3TBJJOvG+LsrdQUvbQOF+efgsgXRi/0e50kSByvUSBtEBkhm7vtDYvlL+0lfHjGk0+Trx9+VxMVb+kEW1P3R5ZC1K50fIflJxlueFsPazzLYcpSWjQB2zA8BgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBBpjFMFKz7Y/7BtRzv5/TLngBBQBvBP5DV57A1iY/y2extG]'
        end
        let(:settings_hash) do
          super().merge('incident_creation_conditions' => ['failures'])
        end

        it 'decrypts the password' do
          expected_incident = {
            short_description: short_description_regex('failed'),
            description: %r{#{settings_hash['pe_console_url']}},
          }
          expect_created_incident(expected_incident, expected_credentials)
          processor.process
        end
      end
    end

    context 'with hiera-eyaml encrypted oauth_token' do
      # NOTE: This oauth_token is the encrypted form of 'oauth_token'. It was generated by the command
      # 'eyaml encrypt -s 'oauth_token' --pkcs7-private-key=./spec/support/files/private_key.pkcs7.pem --pkcs7-public-key=./spec/support/files/public_key.pkcs7.pem'
      let(:encrypted_oauth_token) do
        'ENC[PKCS7,MIIBeQYJKoZIhvcNAQcDoIIBajCCAWYCAQAxggEhMIIBHQIBADAFMAACAQEwDQYJKoZIhvcNAQEBBQAEggEAKVAUJvBJGrG25SGq0oVymzCxlQ3rvnqNHvl4rKagNshNDe0FKXUxDv0lz/DuklYMTFnKrm8gZxNESvr35ecBM2FckDy1NkIaWWKVFMg5H7KuZaCN/mFgtEpwUkUl3yJpcoJsfN4FpdCWAwjLF1qdOQ25nMEB9sKezZUKMjKm0pnGslr2Gj35HTTxc78HgT9cgVZHi5+NefFlMHDUZWyuSeL4xr4msUFDn6F1RoJp8zYPz31kBMgbowTNxICJV4vX8plwNgLcJicuqeOsEkznO/1bc+fh2yyiAUqimwctd20oni6eubkV8JY5wxfETX+GOiHuHCYZPFemTXHxl3O/GTA8BgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBBl5Z3XF8s8RfEEGTDABqwDgBAadR7I9hBGLSC0m5Ut6xzo]'
      end
      let(:config) do
        default_config = super()
        default_config['oauth_token'] = encrypted_oauth_token
        default_config
      end
      let(:settings_hash) do
        super().merge('incident_creation_conditions' => ['failures'])
      end

      include_context 'setup hiera-eyaml'

      it 'decrypts the oauth token' do
        expected_incident = {
          short_description: short_description_regex('failed'),
          description: %r{#{settings_hash['pe_console_url']}},
        }
        expect_created_incident(expected_incident, oauth_token: 'test_token')
        processor.process
      end
    end
  end

  context 'filters environment via allow and block lists' do
    [
      { environment: 'production', allow_list: ['all'], block_list: ['test'], expected_value: false },
      { environment: 'production', allow_list: ['none'], block_list: ['test'], expected_value: true },
      { environment: 'production', allow_list: ['production'], block_list: ['test'], expected_value: false },
      { environment: '1.0-release-2', allow_list: ['*release*'], block_list: ['test'], expected_value: false },
      { environment: 'production', allow_list: ['release'], block_list: ['all'], expected_value: true },
      { environment: 'production', allow_list: ['production'], block_list: ['none'], expected_value: false },
      { environment: 'production', allow_list: ['release'], block_list: ['production'], expected_value: true },
      { environment: 'release-2', allow_list: ['production'], block_list: ['release*'], expected_value: true },
      { environment: '1.0-release', allow_list: ['*release'], block_list: ['*release'], expected_value: true },
      { environment: '1.0-prod-4', allow_list: ['none'], block_list: ['none'], expected_value: true },
    ].each do |test_case|
      it "When environment is #{test_case[:environment]}, and allow_list is set to #{test_case[:allow_list]} and block_list is set to #{test_case[:block_list]}, expect to return #{test_case[:expected_value]}" do
        expect(Puppet::Util::Servicenow.env_filter_not_allowed?(test_case[:environment], test_case[:allow_list], test_case[:block_list])).to be test_case[:expected_value]
      end
    end
  end
end
